// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { SearchApiV1SearchGetData, SearchApiV1SearchGetResponse, SearchApiV1SearchGetError, ExtractContentGetApiV1ExtractGetData, ExtractContentGetApiV1ExtractGetResponse, ExtractContentGetApiV1ExtractGetError, ExtractContentApiV1ExtractPostData, ExtractContentApiV1ExtractPostResponse, ExtractContentApiV1ExtractPostError, GetCreditsApiV1CreditsGetData, GetCreditsApiV1CreditsGetResponse, GetCreditsApiV1CreditsGetError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Search
 * Search endpoint that returns formatted results from external search provider.
 *
 * Args:
 * query: The search query string
 * language: Optional ISO language code (e.g., 'en', 'fr')
 * country: Optional country code (e.g., 'us', 'gb')
 * max_results: Maximum number of results to return (1-10)
 * summarize: Whether to generate a summary of results using LLM
 * provider: Search provider to use (google, bing, duckduckgo)
 * topic: Search topic category
 * use_selenium: Whether to enhance DuckDuckGo results with Selenium
 * published_start_date: Filter results published after this date
 * published_end_date: Filter results published before this date
 * crawl_start_date: Filter results crawled after this date
 * crawl_end_date: Filter results crawled before this date
 * include_domains: Filter results to only include these domains
 * exclude_domains: Filter results to exclude these domains
 * include_terms: Filter results to only include these terms
 * exclude_terms: Filter results to exclude these terms
 *
 * Returns:
 * JSON response with formatted search results
 */
export const searchApiV1SearchGet = <ThrowOnError extends boolean = false>(options: Options<SearchApiV1SearchGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SearchApiV1SearchGetResponse, SearchApiV1SearchGetError, ThrowOnError>({
        url: '/api/v1/search',
        ...options
    });
};

/**
 * Extract Content Get
 * Extract content from a URL using Selenium (GET method).
 *
 * Args:
 * url: URL to extract content from
 * include_images: Whether to include images in the result
 * include_links: Whether to include internal links in the result
 * extract_depth: Depth of extraction ("basic" or "advanced")
 *
 * Returns:
 * ExtractResponse with extraction results and metadata
 */
export const extractContentGetApiV1ExtractGet = <ThrowOnError extends boolean = false>(options: Options<ExtractContentGetApiV1ExtractGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExtractContentGetApiV1ExtractGetResponse, ExtractContentGetApiV1ExtractGetError, ThrowOnError>({
        url: '/api/v1/extract',
        ...options
    });
};

/**
 * Extract Content
 * Extract content from one or more URLs using Selenium.
 *
 * Args:
 * request: ExtractRequest object with URLs and extraction options
 *
 * Returns:
 * ExtractResponse with extraction results and metadata
 */
export const extractContentApiV1ExtractPost = <ThrowOnError extends boolean = false>(options: Options<ExtractContentApiV1ExtractPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExtractContentApiV1ExtractPostResponse, ExtractContentApiV1ExtractPostError, ThrowOnError>({
        url: '/api/v1/extract',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get Credits
 * Get current credit usage and limits for the authenticated user.
 *
 * Returns:
 * CreditResponse with total, used, and remaining credits
 */
export const getCreditsApiV1CreditsGet = <ThrowOnError extends boolean = false>(options?: Options<GetCreditsApiV1CreditsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCreditsApiV1CreditsGetResponse, GetCreditsApiV1CreditsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/v1/credits',
        ...options
    });
};