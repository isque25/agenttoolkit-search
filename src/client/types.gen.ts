// This file is auto-generated by @hey-api/openapi-ts

/**
 * Schema for the credit usage response.
 */
export type CreditResponse = {
    total_credits: number;
    used_credits: number;
    remaining_credits: number;
    free_credits: number;
    purchased_credits?: number;
    period: string;
    reset_date: string;
    days_until_reset: number;
    plan_tier?: string | null;
};

/**
 * Standard error response model
 */
export type ErrorResponse = {
    /**
     * Error message
     */
    detail: string;
    /**
     * Error code
     */
    code?: string | null;
    /**
     * Detailed validation errors
     */
    errors?: {
        [key: string]: Array<string>;
    } | null;
};

/**
 * Schema for extract request.
 */
export type ExtractRequest = {
    /**
     * List of URLs to extract content from.
     */
    urls: Array<string>;
    /**
     * Include images in the response.
     */
    include_images?: boolean;
    /**
     * Include internal links found on the page in the response.
     */
    include_links?: boolean;
    /**
     * Depth of extraction. 'advanced' retrieves more data including tables and embedded content.
     */
    extract_depth?: 'basic' | 'advanced';
};

/**
 * Schema for extract response.
 */
export type ExtractResponse = {
    /**
     * List of successful extractions.
     */
    results?: Array<ExtractResult>;
    /**
     * List of failed extractions.
     */
    failed_results?: Array<FailedResult>;
    /**
     * Time in seconds it took to complete the request.
     */
    response_time: number;
};

/**
 * Schema for a successful extraction result.
 */
export type ExtractResult = {
    /**
     * The URL from which content was extracted.
     */
    url: string;
    /**
     * The full content extracted from the page.
     */
    raw_content: string;
    /**
     * List of image URLs extracted from the page.
     */
    images?: Array<string> | null;
    /**
     * List of internal links found on the page.
     */
    links?: Array<string> | null;
    /**
     * Indicates if this result was served from cache.
     */
    cache_hit?: boolean;
};

/**
 * Schema for a failed extraction result.
 */
export type FailedResult = {
    /**
     * The URL that failed to be processed.
     */
    url: string;
    /**
     * Error message describing why the URL couldn't be processed.
     */
    error: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Schema for the search response
 */
export type SearchResponse = {
    /**
     * The search query that was processed
     */
    query: string;
    /**
     * List of search results
     */
    results: Array<SearchResult>;
    /**
     * Optional LLM-generated summary of results
     */
    summary?: string | null;
    /**
     * Search topic category used for the search
     */
    topic?: string | null;
    /**
     * Language used for the search
     */
    language?: string | null;
    /**
     * Country used for the search
     */
    country?: string | null;
    /**
     * Number of results returned
     */
    result_count?: number;
    /**
     * Filters that were applied to the search
     */
    applied_filters?: {
        [key: string]: unknown;
    } | null;
    /**
     * Whether Selenium enhancement was enabled for this search
     */
    selenium_enhancement?: boolean | null;
    /**
     * Number of results that were enhanced with Selenium
     */
    enhanced_results_count?: number | null;
};

/**
 * Schema for a single search result
 */
export type SearchResult = {
    /**
     * The title of the search result
     */
    title: string;
    /**
     * A clean summary or snippet from the search result
     */
    snippet: string;
    /**
     * The URL of the search result
     */
    url: string;
    /**
     * Publication date of the result if available
     */
    published_date?: string | null;
    /**
     * Last modification date of the result if available
     */
    modified_date?: string | null;
    /**
     * Date when the result was last crawled if available
     */
    crawl_date?: string | null;
    /**
     * Domain of the result URL
     */
    domain?: string | null;
    /**
     * Language of this specific result if available
     */
    language?: string | null;
    /**
     * Country context of this specific result if available
     */
    country?: string | null;
    /**
     * Whether this result was enhanced with Selenium
     */
    enhanced_with_selenium?: boolean | null;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type SearchApiV1SearchGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Search query string
         */
        query: string;
        /**
         * ISO language code (e.g., 'en', 'fr')
         */
        language?: string | null;
        /**
         * Country code (e.g., 'us', 'gb')
         */
        country?: string | null;
        /**
         * Maximum number of results to return
         */
        max_results?: number;
        /**
         * Whether to generate a summary of results using LLM
         */
        summarize?: boolean;
        /**
         * Search provider to use
         */
        provider?: ('google' | 'bing' | 'duckduckgo') | null;
        /**
         * Search topic category
         */
        topic?: 'general' | 'news' | 'images' | 'videos' | 'finance';
        /**
         * Whether to enhance DuckDuckGo results with Selenium (only applies to DuckDuckGo provider)
         */
        use_selenium?: boolean;
        /**
         * Start date for published content (YYYY-MM-DD)
         */
        published_start_date?: string | null;
        /**
         * End date for published content (YYYY-MM-DD)
         */
        published_end_date?: string | null;
        /**
         * Start date for crawled content (YYYY-MM-DD)
         */
        crawl_start_date?: string | null;
        /**
         * End date for crawled content (YYYY-MM-DD)
         */
        crawl_end_date?: string | null;
        /**
         * Domains to include in search results
         */
        include_domains?: Array<string> | null;
        /**
         * Domains to exclude from search results
         */
        exclude_domains?: Array<string> | null;
        /**
         * Terms that must be included in search results
         */
        include_terms?: Array<string> | null;
        /**
         * Terms that must be excluded from search results
         */
        exclude_terms?: Array<string> | null;
    };
    url: '/api/v1/search';
};

export type SearchApiV1SearchGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type SearchApiV1SearchGetError = SearchApiV1SearchGetErrors[keyof SearchApiV1SearchGetErrors];

export type SearchApiV1SearchGetResponses = {
    /**
     * Successful Response
     */
    200: SearchResponse;
};

export type SearchApiV1SearchGetResponse = SearchApiV1SearchGetResponses[keyof SearchApiV1SearchGetResponses];

export type ExtractContentGetApiV1ExtractGetData = {
    body?: never;
    path?: never;
    query: {
        /**
         * URL to extract content from
         */
        url: string;
        /**
         * Include images in the response
         */
        include_images?: boolean;
        /**
         * Include internal links found on the page in the response
         */
        include_links?: boolean;
        /**
         * Depth of extraction ('basic' or 'advanced')
         */
        extract_depth?: string;
    };
    url: '/api/v1/extract';
};

export type ExtractContentGetApiV1ExtractGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ExtractContentGetApiV1ExtractGetError = ExtractContentGetApiV1ExtractGetErrors[keyof ExtractContentGetApiV1ExtractGetErrors];

export type ExtractContentGetApiV1ExtractGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractResponse;
};

export type ExtractContentGetApiV1ExtractGetResponse = ExtractContentGetApiV1ExtractGetResponses[keyof ExtractContentGetApiV1ExtractGetResponses];

export type ExtractContentApiV1ExtractPostData = {
    body: ExtractRequest;
    path?: never;
    query?: never;
    url: '/api/v1/extract';
};

export type ExtractContentApiV1ExtractPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type ExtractContentApiV1ExtractPostError = ExtractContentApiV1ExtractPostErrors[keyof ExtractContentApiV1ExtractPostErrors];

export type ExtractContentApiV1ExtractPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractResponse;
};

export type ExtractContentApiV1ExtractPostResponse = ExtractContentApiV1ExtractPostResponses[keyof ExtractContentApiV1ExtractPostResponses];

export type GetCreditsApiV1CreditsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/credits';
};

export type GetCreditsApiV1CreditsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
    /**
     * Internal Server Error
     */
    500: ErrorResponse;
};

export type GetCreditsApiV1CreditsGetError = GetCreditsApiV1CreditsGetErrors[keyof GetCreditsApiV1CreditsGetErrors];

export type GetCreditsApiV1CreditsGetResponses = {
    /**
     * Successful Response
     */
    200: CreditResponse;
};

export type GetCreditsApiV1CreditsGetResponse = GetCreditsApiV1CreditsGetResponses[keyof GetCreditsApiV1CreditsGetResponses];

export type ClientOptions = {
    baseUrl: 'https://api.agenttoolkit.ai' | (string & {});
};